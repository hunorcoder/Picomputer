
.program rgb
pull block ; Pull value to osr, happens once
mov y, osr ; Save osr to scratch register y, contains horizontal active region cycles (640)
.wrap_target
	set pins, 0 ; Clear RGB pins in inactive regions
	mov x, y ; Copy y's value to x (x is a counter)
	
	wait 1 irq 1 [3] ; Wait for active region + 5 cycles (1 VGA cycle)

	pushcolors: ; Push out 8bits of color x times
		pull block
		out pins, 8 [2]
		jmp x-- pushcolors

.wrap

% c-sdk {
		static inline void rgb_program_init(PIO pio, uint sm, uint offset, uint pin) {
			pio_sm_config c = rgb_program_get_default_config(offset);
			sm_config_set_set_pins(&c, pin, 8); // Set output pins (8 pins starting from `pin`)
			//sm_config_set_clkdiv(&c, 1); // Set clock divider (RGB does not need clock div, so 1)
			sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
			for (char i = 0; i < 8; i++) {
				pio_gpio_init(pio, pin + i); // Connect all 8 pins to the pad
			}
			pio_sm_set_consecutive_pindirs(pio, sm, pin, 8, true); // Set the pin directions
			pio_sm_init(pio, sm, offset, &c); // Init
		}
%}